# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from authorization.v2 import authorization_pb2 as authorization_dot_v2_dot_authorization__pb2


class AuthorizationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDecision = channel.unary_unary(
                '/authorization.v2.AuthorizationService/GetDecision',
                request_serializer=authorization_dot_v2_dot_authorization__pb2.GetDecisionRequest.SerializeToString,
                response_deserializer=authorization_dot_v2_dot_authorization__pb2.GetDecisionResponse.FromString,
                _registered_method=True)
        self.GetDecisionMultiResource = channel.unary_unary(
                '/authorization.v2.AuthorizationService/GetDecisionMultiResource',
                request_serializer=authorization_dot_v2_dot_authorization__pb2.GetDecisionMultiResourceRequest.SerializeToString,
                response_deserializer=authorization_dot_v2_dot_authorization__pb2.GetDecisionMultiResourceResponse.FromString,
                _registered_method=True)
        self.GetDecisionBulk = channel.unary_unary(
                '/authorization.v2.AuthorizationService/GetDecisionBulk',
                request_serializer=authorization_dot_v2_dot_authorization__pb2.GetDecisionBulkRequest.SerializeToString,
                response_deserializer=authorization_dot_v2_dot_authorization__pb2.GetDecisionBulkResponse.FromString,
                _registered_method=True)
        self.GetEntitlements = channel.unary_unary(
                '/authorization.v2.AuthorizationService/GetEntitlements',
                request_serializer=authorization_dot_v2_dot_authorization__pb2.GetEntitlementsRequest.SerializeToString,
                response_deserializer=authorization_dot_v2_dot_authorization__pb2.GetEntitlementsResponse.FromString,
                _registered_method=True)


class AuthorizationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetDecision(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDecisionMultiResource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDecisionBulk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEntitlements(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthorizationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDecision': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDecision,
                    request_deserializer=authorization_dot_v2_dot_authorization__pb2.GetDecisionRequest.FromString,
                    response_serializer=authorization_dot_v2_dot_authorization__pb2.GetDecisionResponse.SerializeToString,
            ),
            'GetDecisionMultiResource': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDecisionMultiResource,
                    request_deserializer=authorization_dot_v2_dot_authorization__pb2.GetDecisionMultiResourceRequest.FromString,
                    response_serializer=authorization_dot_v2_dot_authorization__pb2.GetDecisionMultiResourceResponse.SerializeToString,
            ),
            'GetDecisionBulk': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDecisionBulk,
                    request_deserializer=authorization_dot_v2_dot_authorization__pb2.GetDecisionBulkRequest.FromString,
                    response_serializer=authorization_dot_v2_dot_authorization__pb2.GetDecisionBulkResponse.SerializeToString,
            ),
            'GetEntitlements': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEntitlements,
                    request_deserializer=authorization_dot_v2_dot_authorization__pb2.GetEntitlementsRequest.FromString,
                    response_serializer=authorization_dot_v2_dot_authorization__pb2.GetEntitlementsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'authorization.v2.AuthorizationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('authorization.v2.AuthorizationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AuthorizationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetDecision(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authorization.v2.AuthorizationService/GetDecision',
            authorization_dot_v2_dot_authorization__pb2.GetDecisionRequest.SerializeToString,
            authorization_dot_v2_dot_authorization__pb2.GetDecisionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDecisionMultiResource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authorization.v2.AuthorizationService/GetDecisionMultiResource',
            authorization_dot_v2_dot_authorization__pb2.GetDecisionMultiResourceRequest.SerializeToString,
            authorization_dot_v2_dot_authorization__pb2.GetDecisionMultiResourceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDecisionBulk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authorization.v2.AuthorizationService/GetDecisionBulk',
            authorization_dot_v2_dot_authorization__pb2.GetDecisionBulkRequest.SerializeToString,
            authorization_dot_v2_dot_authorization__pb2.GetDecisionBulkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEntitlements(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/authorization.v2.AuthorizationService/GetEntitlements',
            authorization_dot_v2_dot_authorization__pb2.GetEntitlementsRequest.SerializeToString,
            authorization_dot_v2_dot_authorization__pb2.GetEntitlementsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
