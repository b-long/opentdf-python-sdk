# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from policy.actions import actions_pb2 as policy_dot_actions_dot_actions__pb2


class ActionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAction = channel.unary_unary(
                '/policy.actions.ActionService/GetAction',
                request_serializer=policy_dot_actions_dot_actions__pb2.GetActionRequest.SerializeToString,
                response_deserializer=policy_dot_actions_dot_actions__pb2.GetActionResponse.FromString,
                _registered_method=True)
        self.ListActions = channel.unary_unary(
                '/policy.actions.ActionService/ListActions',
                request_serializer=policy_dot_actions_dot_actions__pb2.ListActionsRequest.SerializeToString,
                response_deserializer=policy_dot_actions_dot_actions__pb2.ListActionsResponse.FromString,
                _registered_method=True)
        self.CreateAction = channel.unary_unary(
                '/policy.actions.ActionService/CreateAction',
                request_serializer=policy_dot_actions_dot_actions__pb2.CreateActionRequest.SerializeToString,
                response_deserializer=policy_dot_actions_dot_actions__pb2.CreateActionResponse.FromString,
                _registered_method=True)
        self.UpdateAction = channel.unary_unary(
                '/policy.actions.ActionService/UpdateAction',
                request_serializer=policy_dot_actions_dot_actions__pb2.UpdateActionRequest.SerializeToString,
                response_deserializer=policy_dot_actions_dot_actions__pb2.UpdateActionResponse.FromString,
                _registered_method=True)
        self.DeleteAction = channel.unary_unary(
                '/policy.actions.ActionService/DeleteAction',
                request_serializer=policy_dot_actions_dot_actions__pb2.DeleteActionRequest.SerializeToString,
                response_deserializer=policy_dot_actions_dot_actions__pb2.DeleteActionResponse.FromString,
                _registered_method=True)


class ActionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListActions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ActionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAction,
                    request_deserializer=policy_dot_actions_dot_actions__pb2.GetActionRequest.FromString,
                    response_serializer=policy_dot_actions_dot_actions__pb2.GetActionResponse.SerializeToString,
            ),
            'ListActions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListActions,
                    request_deserializer=policy_dot_actions_dot_actions__pb2.ListActionsRequest.FromString,
                    response_serializer=policy_dot_actions_dot_actions__pb2.ListActionsResponse.SerializeToString,
            ),
            'CreateAction': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAction,
                    request_deserializer=policy_dot_actions_dot_actions__pb2.CreateActionRequest.FromString,
                    response_serializer=policy_dot_actions_dot_actions__pb2.CreateActionResponse.SerializeToString,
            ),
            'UpdateAction': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAction,
                    request_deserializer=policy_dot_actions_dot_actions__pb2.UpdateActionRequest.FromString,
                    response_serializer=policy_dot_actions_dot_actions__pb2.UpdateActionResponse.SerializeToString,
            ),
            'DeleteAction': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAction,
                    request_deserializer=policy_dot_actions_dot_actions__pb2.DeleteActionRequest.FromString,
                    response_serializer=policy_dot_actions_dot_actions__pb2.DeleteActionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'policy.actions.ActionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('policy.actions.ActionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ActionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.actions.ActionService/GetAction',
            policy_dot_actions_dot_actions__pb2.GetActionRequest.SerializeToString,
            policy_dot_actions_dot_actions__pb2.GetActionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListActions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.actions.ActionService/ListActions',
            policy_dot_actions_dot_actions__pb2.ListActionsRequest.SerializeToString,
            policy_dot_actions_dot_actions__pb2.ListActionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.actions.ActionService/CreateAction',
            policy_dot_actions_dot_actions__pb2.CreateActionRequest.SerializeToString,
            policy_dot_actions_dot_actions__pb2.CreateActionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.actions.ActionService/UpdateAction',
            policy_dot_actions_dot_actions__pb2.UpdateActionRequest.SerializeToString,
            policy_dot_actions_dot_actions__pb2.UpdateActionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.actions.ActionService/DeleteAction',
            policy_dot_actions_dot_actions__pb2.DeleteActionRequest.SerializeToString,
            policy_dot_actions_dot_actions__pb2.DeleteActionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
