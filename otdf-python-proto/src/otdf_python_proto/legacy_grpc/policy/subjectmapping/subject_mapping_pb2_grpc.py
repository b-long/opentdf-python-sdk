# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from policy.subjectmapping import subject_mapping_pb2 as policy_dot_subjectmapping_dot_subject__mapping__pb2


class SubjectMappingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MatchSubjectMappings = channel.unary_unary(
                '/policy.subjectmapping.SubjectMappingService/MatchSubjectMappings',
                request_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.MatchSubjectMappingsRequest.SerializeToString,
                response_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.MatchSubjectMappingsResponse.FromString,
                _registered_method=True)
        self.ListSubjectMappings = channel.unary_unary(
                '/policy.subjectmapping.SubjectMappingService/ListSubjectMappings',
                request_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.ListSubjectMappingsRequest.SerializeToString,
                response_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.ListSubjectMappingsResponse.FromString,
                _registered_method=True)
        self.GetSubjectMapping = channel.unary_unary(
                '/policy.subjectmapping.SubjectMappingService/GetSubjectMapping',
                request_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.GetSubjectMappingRequest.SerializeToString,
                response_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.GetSubjectMappingResponse.FromString,
                _registered_method=True)
        self.CreateSubjectMapping = channel.unary_unary(
                '/policy.subjectmapping.SubjectMappingService/CreateSubjectMapping',
                request_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.CreateSubjectMappingRequest.SerializeToString,
                response_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.CreateSubjectMappingResponse.FromString,
                _registered_method=True)
        self.UpdateSubjectMapping = channel.unary_unary(
                '/policy.subjectmapping.SubjectMappingService/UpdateSubjectMapping',
                request_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.UpdateSubjectMappingRequest.SerializeToString,
                response_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.UpdateSubjectMappingResponse.FromString,
                _registered_method=True)
        self.DeleteSubjectMapping = channel.unary_unary(
                '/policy.subjectmapping.SubjectMappingService/DeleteSubjectMapping',
                request_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.DeleteSubjectMappingRequest.SerializeToString,
                response_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.DeleteSubjectMappingResponse.FromString,
                _registered_method=True)
        self.ListSubjectConditionSets = channel.unary_unary(
                '/policy.subjectmapping.SubjectMappingService/ListSubjectConditionSets',
                request_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.ListSubjectConditionSetsRequest.SerializeToString,
                response_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.ListSubjectConditionSetsResponse.FromString,
                _registered_method=True)
        self.GetSubjectConditionSet = channel.unary_unary(
                '/policy.subjectmapping.SubjectMappingService/GetSubjectConditionSet',
                request_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.GetSubjectConditionSetRequest.SerializeToString,
                response_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.GetSubjectConditionSetResponse.FromString,
                _registered_method=True)
        self.CreateSubjectConditionSet = channel.unary_unary(
                '/policy.subjectmapping.SubjectMappingService/CreateSubjectConditionSet',
                request_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.CreateSubjectConditionSetRequest.SerializeToString,
                response_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.CreateSubjectConditionSetResponse.FromString,
                _registered_method=True)
        self.UpdateSubjectConditionSet = channel.unary_unary(
                '/policy.subjectmapping.SubjectMappingService/UpdateSubjectConditionSet',
                request_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.UpdateSubjectConditionSetRequest.SerializeToString,
                response_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.UpdateSubjectConditionSetResponse.FromString,
                _registered_method=True)
        self.DeleteSubjectConditionSet = channel.unary_unary(
                '/policy.subjectmapping.SubjectMappingService/DeleteSubjectConditionSet',
                request_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.DeleteSubjectConditionSetRequest.SerializeToString,
                response_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.DeleteSubjectConditionSetResponse.FromString,
                _registered_method=True)
        self.DeleteAllUnmappedSubjectConditionSets = channel.unary_unary(
                '/policy.subjectmapping.SubjectMappingService/DeleteAllUnmappedSubjectConditionSets',
                request_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.DeleteAllUnmappedSubjectConditionSetsRequest.SerializeToString,
                response_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.DeleteAllUnmappedSubjectConditionSetsResponse.FromString,
                _registered_method=True)


class SubjectMappingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def MatchSubjectMappings(self, request, context):
        """Find matching Subject Mappings for a given Subject
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSubjectMappings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubjectMapping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSubjectMapping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSubjectMapping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSubjectMapping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSubjectConditionSets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubjectConditionSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSubjectConditionSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSubjectConditionSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSubjectConditionSet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAllUnmappedSubjectConditionSets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SubjectMappingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MatchSubjectMappings': grpc.unary_unary_rpc_method_handler(
                    servicer.MatchSubjectMappings,
                    request_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.MatchSubjectMappingsRequest.FromString,
                    response_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.MatchSubjectMappingsResponse.SerializeToString,
            ),
            'ListSubjectMappings': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSubjectMappings,
                    request_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.ListSubjectMappingsRequest.FromString,
                    response_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.ListSubjectMappingsResponse.SerializeToString,
            ),
            'GetSubjectMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSubjectMapping,
                    request_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.GetSubjectMappingRequest.FromString,
                    response_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.GetSubjectMappingResponse.SerializeToString,
            ),
            'CreateSubjectMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSubjectMapping,
                    request_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.CreateSubjectMappingRequest.FromString,
                    response_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.CreateSubjectMappingResponse.SerializeToString,
            ),
            'UpdateSubjectMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSubjectMapping,
                    request_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.UpdateSubjectMappingRequest.FromString,
                    response_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.UpdateSubjectMappingResponse.SerializeToString,
            ),
            'DeleteSubjectMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSubjectMapping,
                    request_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.DeleteSubjectMappingRequest.FromString,
                    response_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.DeleteSubjectMappingResponse.SerializeToString,
            ),
            'ListSubjectConditionSets': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSubjectConditionSets,
                    request_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.ListSubjectConditionSetsRequest.FromString,
                    response_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.ListSubjectConditionSetsResponse.SerializeToString,
            ),
            'GetSubjectConditionSet': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSubjectConditionSet,
                    request_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.GetSubjectConditionSetRequest.FromString,
                    response_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.GetSubjectConditionSetResponse.SerializeToString,
            ),
            'CreateSubjectConditionSet': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSubjectConditionSet,
                    request_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.CreateSubjectConditionSetRequest.FromString,
                    response_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.CreateSubjectConditionSetResponse.SerializeToString,
            ),
            'UpdateSubjectConditionSet': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSubjectConditionSet,
                    request_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.UpdateSubjectConditionSetRequest.FromString,
                    response_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.UpdateSubjectConditionSetResponse.SerializeToString,
            ),
            'DeleteSubjectConditionSet': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSubjectConditionSet,
                    request_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.DeleteSubjectConditionSetRequest.FromString,
                    response_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.DeleteSubjectConditionSetResponse.SerializeToString,
            ),
            'DeleteAllUnmappedSubjectConditionSets': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAllUnmappedSubjectConditionSets,
                    request_deserializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.DeleteAllUnmappedSubjectConditionSetsRequest.FromString,
                    response_serializer=policy_dot_subjectmapping_dot_subject__mapping__pb2.DeleteAllUnmappedSubjectConditionSetsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'policy.subjectmapping.SubjectMappingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('policy.subjectmapping.SubjectMappingService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SubjectMappingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def MatchSubjectMappings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.subjectmapping.SubjectMappingService/MatchSubjectMappings',
            policy_dot_subjectmapping_dot_subject__mapping__pb2.MatchSubjectMappingsRequest.SerializeToString,
            policy_dot_subjectmapping_dot_subject__mapping__pb2.MatchSubjectMappingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSubjectMappings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.subjectmapping.SubjectMappingService/ListSubjectMappings',
            policy_dot_subjectmapping_dot_subject__mapping__pb2.ListSubjectMappingsRequest.SerializeToString,
            policy_dot_subjectmapping_dot_subject__mapping__pb2.ListSubjectMappingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSubjectMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.subjectmapping.SubjectMappingService/GetSubjectMapping',
            policy_dot_subjectmapping_dot_subject__mapping__pb2.GetSubjectMappingRequest.SerializeToString,
            policy_dot_subjectmapping_dot_subject__mapping__pb2.GetSubjectMappingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateSubjectMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.subjectmapping.SubjectMappingService/CreateSubjectMapping',
            policy_dot_subjectmapping_dot_subject__mapping__pb2.CreateSubjectMappingRequest.SerializeToString,
            policy_dot_subjectmapping_dot_subject__mapping__pb2.CreateSubjectMappingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateSubjectMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.subjectmapping.SubjectMappingService/UpdateSubjectMapping',
            policy_dot_subjectmapping_dot_subject__mapping__pb2.UpdateSubjectMappingRequest.SerializeToString,
            policy_dot_subjectmapping_dot_subject__mapping__pb2.UpdateSubjectMappingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSubjectMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.subjectmapping.SubjectMappingService/DeleteSubjectMapping',
            policy_dot_subjectmapping_dot_subject__mapping__pb2.DeleteSubjectMappingRequest.SerializeToString,
            policy_dot_subjectmapping_dot_subject__mapping__pb2.DeleteSubjectMappingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSubjectConditionSets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.subjectmapping.SubjectMappingService/ListSubjectConditionSets',
            policy_dot_subjectmapping_dot_subject__mapping__pb2.ListSubjectConditionSetsRequest.SerializeToString,
            policy_dot_subjectmapping_dot_subject__mapping__pb2.ListSubjectConditionSetsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSubjectConditionSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.subjectmapping.SubjectMappingService/GetSubjectConditionSet',
            policy_dot_subjectmapping_dot_subject__mapping__pb2.GetSubjectConditionSetRequest.SerializeToString,
            policy_dot_subjectmapping_dot_subject__mapping__pb2.GetSubjectConditionSetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateSubjectConditionSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.subjectmapping.SubjectMappingService/CreateSubjectConditionSet',
            policy_dot_subjectmapping_dot_subject__mapping__pb2.CreateSubjectConditionSetRequest.SerializeToString,
            policy_dot_subjectmapping_dot_subject__mapping__pb2.CreateSubjectConditionSetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateSubjectConditionSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.subjectmapping.SubjectMappingService/UpdateSubjectConditionSet',
            policy_dot_subjectmapping_dot_subject__mapping__pb2.UpdateSubjectConditionSetRequest.SerializeToString,
            policy_dot_subjectmapping_dot_subject__mapping__pb2.UpdateSubjectConditionSetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteSubjectConditionSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.subjectmapping.SubjectMappingService/DeleteSubjectConditionSet',
            policy_dot_subjectmapping_dot_subject__mapping__pb2.DeleteSubjectConditionSetRequest.SerializeToString,
            policy_dot_subjectmapping_dot_subject__mapping__pb2.DeleteSubjectConditionSetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAllUnmappedSubjectConditionSets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.subjectmapping.SubjectMappingService/DeleteAllUnmappedSubjectConditionSets',
            policy_dot_subjectmapping_dot_subject__mapping__pb2.DeleteAllUnmappedSubjectConditionSetsRequest.SerializeToString,
            policy_dot_subjectmapping_dot_subject__mapping__pb2.DeleteAllUnmappedSubjectConditionSetsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
