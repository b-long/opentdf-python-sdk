# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from policy.kasregistry import key_access_server_registry_pb2 as policy_dot_kasregistry_dot_key__access__server__registry__pb2


class KeyAccessServerRegistryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListKeyAccessServers = channel.unary_unary(
                '/policy.kasregistry.KeyAccessServerRegistryService/ListKeyAccessServers',
                request_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.ListKeyAccessServersRequest.SerializeToString,
                response_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.ListKeyAccessServersResponse.FromString,
                _registered_method=True)
        self.GetKeyAccessServer = channel.unary_unary(
                '/policy.kasregistry.KeyAccessServerRegistryService/GetKeyAccessServer',
                request_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.GetKeyAccessServerRequest.SerializeToString,
                response_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.GetKeyAccessServerResponse.FromString,
                _registered_method=True)
        self.CreateKeyAccessServer = channel.unary_unary(
                '/policy.kasregistry.KeyAccessServerRegistryService/CreateKeyAccessServer',
                request_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.CreateKeyAccessServerRequest.SerializeToString,
                response_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.CreateKeyAccessServerResponse.FromString,
                _registered_method=True)
        self.UpdateKeyAccessServer = channel.unary_unary(
                '/policy.kasregistry.KeyAccessServerRegistryService/UpdateKeyAccessServer',
                request_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.UpdateKeyAccessServerRequest.SerializeToString,
                response_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.UpdateKeyAccessServerResponse.FromString,
                _registered_method=True)
        self.DeleteKeyAccessServer = channel.unary_unary(
                '/policy.kasregistry.KeyAccessServerRegistryService/DeleteKeyAccessServer',
                request_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.DeleteKeyAccessServerRequest.SerializeToString,
                response_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.DeleteKeyAccessServerResponse.FromString,
                _registered_method=True)
        self.ListKeyAccessServerGrants = channel.unary_unary(
                '/policy.kasregistry.KeyAccessServerRegistryService/ListKeyAccessServerGrants',
                request_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.ListKeyAccessServerGrantsRequest.SerializeToString,
                response_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.ListKeyAccessServerGrantsResponse.FromString,
                _registered_method=True)
        self.CreateKey = channel.unary_unary(
                '/policy.kasregistry.KeyAccessServerRegistryService/CreateKey',
                request_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.CreateKeyRequest.SerializeToString,
                response_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.CreateKeyResponse.FromString,
                _registered_method=True)
        self.GetKey = channel.unary_unary(
                '/policy.kasregistry.KeyAccessServerRegistryService/GetKey',
                request_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.GetKeyRequest.SerializeToString,
                response_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.GetKeyResponse.FromString,
                _registered_method=True)
        self.ListKeys = channel.unary_unary(
                '/policy.kasregistry.KeyAccessServerRegistryService/ListKeys',
                request_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.ListKeysRequest.SerializeToString,
                response_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.ListKeysResponse.FromString,
                _registered_method=True)
        self.UpdateKey = channel.unary_unary(
                '/policy.kasregistry.KeyAccessServerRegistryService/UpdateKey',
                request_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.UpdateKeyRequest.SerializeToString,
                response_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.UpdateKeyResponse.FromString,
                _registered_method=True)
        self.RotateKey = channel.unary_unary(
                '/policy.kasregistry.KeyAccessServerRegistryService/RotateKey',
                request_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.RotateKeyRequest.SerializeToString,
                response_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.RotateKeyResponse.FromString,
                _registered_method=True)
        self.SetBaseKey = channel.unary_unary(
                '/policy.kasregistry.KeyAccessServerRegistryService/SetBaseKey',
                request_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.SetBaseKeyRequest.SerializeToString,
                response_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.SetBaseKeyResponse.FromString,
                _registered_method=True)
        self.GetBaseKey = channel.unary_unary(
                '/policy.kasregistry.KeyAccessServerRegistryService/GetBaseKey',
                request_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.GetBaseKeyRequest.SerializeToString,
                response_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.GetBaseKeyResponse.FromString,
                _registered_method=True)


class KeyAccessServerRegistryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListKeyAccessServers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKeyAccessServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateKeyAccessServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateKeyAccessServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteKeyAccessServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListKeyAccessServerGrants(self, request, context):
        """Deprecated
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateKey(self, request, context):
        """KAS Key Management
        Request to create a new key in the Key Access Service.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKey(self, request, context):
        """Request to retrieve a key from the Key Access Service.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListKeys(self, request, context):
        """Request to list keys in the Key Access Service.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateKey(self, request, context):
        """Request to update a key in the Key Access Service.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RotateKey(self, request, context):
        """Request to rotate a key in the Key Access Service.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetBaseKey(self, request, context):
        """Request to set the default a default kas key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBaseKey(self, request, context):
        """Get Default kas keys
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KeyAccessServerRegistryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListKeyAccessServers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListKeyAccessServers,
                    request_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.ListKeyAccessServersRequest.FromString,
                    response_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.ListKeyAccessServersResponse.SerializeToString,
            ),
            'GetKeyAccessServer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKeyAccessServer,
                    request_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.GetKeyAccessServerRequest.FromString,
                    response_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.GetKeyAccessServerResponse.SerializeToString,
            ),
            'CreateKeyAccessServer': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateKeyAccessServer,
                    request_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.CreateKeyAccessServerRequest.FromString,
                    response_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.CreateKeyAccessServerResponse.SerializeToString,
            ),
            'UpdateKeyAccessServer': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateKeyAccessServer,
                    request_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.UpdateKeyAccessServerRequest.FromString,
                    response_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.UpdateKeyAccessServerResponse.SerializeToString,
            ),
            'DeleteKeyAccessServer': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteKeyAccessServer,
                    request_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.DeleteKeyAccessServerRequest.FromString,
                    response_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.DeleteKeyAccessServerResponse.SerializeToString,
            ),
            'ListKeyAccessServerGrants': grpc.unary_unary_rpc_method_handler(
                    servicer.ListKeyAccessServerGrants,
                    request_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.ListKeyAccessServerGrantsRequest.FromString,
                    response_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.ListKeyAccessServerGrantsResponse.SerializeToString,
            ),
            'CreateKey': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateKey,
                    request_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.CreateKeyRequest.FromString,
                    response_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.CreateKeyResponse.SerializeToString,
            ),
            'GetKey': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKey,
                    request_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.GetKeyRequest.FromString,
                    response_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.GetKeyResponse.SerializeToString,
            ),
            'ListKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.ListKeys,
                    request_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.ListKeysRequest.FromString,
                    response_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.ListKeysResponse.SerializeToString,
            ),
            'UpdateKey': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateKey,
                    request_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.UpdateKeyRequest.FromString,
                    response_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.UpdateKeyResponse.SerializeToString,
            ),
            'RotateKey': grpc.unary_unary_rpc_method_handler(
                    servicer.RotateKey,
                    request_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.RotateKeyRequest.FromString,
                    response_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.RotateKeyResponse.SerializeToString,
            ),
            'SetBaseKey': grpc.unary_unary_rpc_method_handler(
                    servicer.SetBaseKey,
                    request_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.SetBaseKeyRequest.FromString,
                    response_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.SetBaseKeyResponse.SerializeToString,
            ),
            'GetBaseKey': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBaseKey,
                    request_deserializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.GetBaseKeyRequest.FromString,
                    response_serializer=policy_dot_kasregistry_dot_key__access__server__registry__pb2.GetBaseKeyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'policy.kasregistry.KeyAccessServerRegistryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('policy.kasregistry.KeyAccessServerRegistryService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class KeyAccessServerRegistryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListKeyAccessServers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.kasregistry.KeyAccessServerRegistryService/ListKeyAccessServers',
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.ListKeyAccessServersRequest.SerializeToString,
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.ListKeyAccessServersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetKeyAccessServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.kasregistry.KeyAccessServerRegistryService/GetKeyAccessServer',
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.GetKeyAccessServerRequest.SerializeToString,
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.GetKeyAccessServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateKeyAccessServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.kasregistry.KeyAccessServerRegistryService/CreateKeyAccessServer',
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.CreateKeyAccessServerRequest.SerializeToString,
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.CreateKeyAccessServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateKeyAccessServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.kasregistry.KeyAccessServerRegistryService/UpdateKeyAccessServer',
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.UpdateKeyAccessServerRequest.SerializeToString,
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.UpdateKeyAccessServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteKeyAccessServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.kasregistry.KeyAccessServerRegistryService/DeleteKeyAccessServer',
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.DeleteKeyAccessServerRequest.SerializeToString,
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.DeleteKeyAccessServerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListKeyAccessServerGrants(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.kasregistry.KeyAccessServerRegistryService/ListKeyAccessServerGrants',
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.ListKeyAccessServerGrantsRequest.SerializeToString,
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.ListKeyAccessServerGrantsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.kasregistry.KeyAccessServerRegistryService/CreateKey',
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.CreateKeyRequest.SerializeToString,
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.CreateKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.kasregistry.KeyAccessServerRegistryService/GetKey',
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.GetKeyRequest.SerializeToString,
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.GetKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.kasregistry.KeyAccessServerRegistryService/ListKeys',
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.ListKeysRequest.SerializeToString,
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.ListKeysResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.kasregistry.KeyAccessServerRegistryService/UpdateKey',
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.UpdateKeyRequest.SerializeToString,
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.UpdateKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RotateKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.kasregistry.KeyAccessServerRegistryService/RotateKey',
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.RotateKeyRequest.SerializeToString,
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.RotateKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetBaseKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.kasregistry.KeyAccessServerRegistryService/SetBaseKey',
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.SetBaseKeyRequest.SerializeToString,
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.SetBaseKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBaseKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.kasregistry.KeyAccessServerRegistryService/GetBaseKey',
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.GetBaseKeyRequest.SerializeToString,
            policy_dot_kasregistry_dot_key__access__server__registry__pb2.GetBaseKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
