# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from policy.namespaces import namespaces_pb2 as policy_dot_namespaces_dot_namespaces__pb2


class NamespaceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetNamespace = channel.unary_unary(
                '/policy.namespaces.NamespaceService/GetNamespace',
                request_serializer=policy_dot_namespaces_dot_namespaces__pb2.GetNamespaceRequest.SerializeToString,
                response_deserializer=policy_dot_namespaces_dot_namespaces__pb2.GetNamespaceResponse.FromString,
                _registered_method=True)
        self.ListNamespaces = channel.unary_unary(
                '/policy.namespaces.NamespaceService/ListNamespaces',
                request_serializer=policy_dot_namespaces_dot_namespaces__pb2.ListNamespacesRequest.SerializeToString,
                response_deserializer=policy_dot_namespaces_dot_namespaces__pb2.ListNamespacesResponse.FromString,
                _registered_method=True)
        self.CreateNamespace = channel.unary_unary(
                '/policy.namespaces.NamespaceService/CreateNamespace',
                request_serializer=policy_dot_namespaces_dot_namespaces__pb2.CreateNamespaceRequest.SerializeToString,
                response_deserializer=policy_dot_namespaces_dot_namespaces__pb2.CreateNamespaceResponse.FromString,
                _registered_method=True)
        self.UpdateNamespace = channel.unary_unary(
                '/policy.namespaces.NamespaceService/UpdateNamespace',
                request_serializer=policy_dot_namespaces_dot_namespaces__pb2.UpdateNamespaceRequest.SerializeToString,
                response_deserializer=policy_dot_namespaces_dot_namespaces__pb2.UpdateNamespaceResponse.FromString,
                _registered_method=True)
        self.DeactivateNamespace = channel.unary_unary(
                '/policy.namespaces.NamespaceService/DeactivateNamespace',
                request_serializer=policy_dot_namespaces_dot_namespaces__pb2.DeactivateNamespaceRequest.SerializeToString,
                response_deserializer=policy_dot_namespaces_dot_namespaces__pb2.DeactivateNamespaceResponse.FromString,
                _registered_method=True)
        self.AssignKeyAccessServerToNamespace = channel.unary_unary(
                '/policy.namespaces.NamespaceService/AssignKeyAccessServerToNamespace',
                request_serializer=policy_dot_namespaces_dot_namespaces__pb2.AssignKeyAccessServerToNamespaceRequest.SerializeToString,
                response_deserializer=policy_dot_namespaces_dot_namespaces__pb2.AssignKeyAccessServerToNamespaceResponse.FromString,
                _registered_method=True)
        self.RemoveKeyAccessServerFromNamespace = channel.unary_unary(
                '/policy.namespaces.NamespaceService/RemoveKeyAccessServerFromNamespace',
                request_serializer=policy_dot_namespaces_dot_namespaces__pb2.RemoveKeyAccessServerFromNamespaceRequest.SerializeToString,
                response_deserializer=policy_dot_namespaces_dot_namespaces__pb2.RemoveKeyAccessServerFromNamespaceResponse.FromString,
                _registered_method=True)
        self.AssignPublicKeyToNamespace = channel.unary_unary(
                '/policy.namespaces.NamespaceService/AssignPublicKeyToNamespace',
                request_serializer=policy_dot_namespaces_dot_namespaces__pb2.AssignPublicKeyToNamespaceRequest.SerializeToString,
                response_deserializer=policy_dot_namespaces_dot_namespaces__pb2.AssignPublicKeyToNamespaceResponse.FromString,
                _registered_method=True)
        self.RemovePublicKeyFromNamespace = channel.unary_unary(
                '/policy.namespaces.NamespaceService/RemovePublicKeyFromNamespace',
                request_serializer=policy_dot_namespaces_dot_namespaces__pb2.RemovePublicKeyFromNamespaceRequest.SerializeToString,
                response_deserializer=policy_dot_namespaces_dot_namespaces__pb2.RemovePublicKeyFromNamespaceResponse.FromString,
                _registered_method=True)


class NamespaceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetNamespace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListNamespaces(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateNamespace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateNamespace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeactivateNamespace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignKeyAccessServerToNamespace(self, request, context):
        """--------------------------------------*
        Namespace <> Key Access Server RPCs
        ---------------------------------------
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveKeyAccessServerFromNamespace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignPublicKeyToNamespace(self, request, context):
        """--------------------------------------*
        Namespace <> Key RPCs
        ---------------------------------------
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemovePublicKeyFromNamespace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NamespaceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNamespace,
                    request_deserializer=policy_dot_namespaces_dot_namespaces__pb2.GetNamespaceRequest.FromString,
                    response_serializer=policy_dot_namespaces_dot_namespaces__pb2.GetNamespaceResponse.SerializeToString,
            ),
            'ListNamespaces': grpc.unary_unary_rpc_method_handler(
                    servicer.ListNamespaces,
                    request_deserializer=policy_dot_namespaces_dot_namespaces__pb2.ListNamespacesRequest.FromString,
                    response_serializer=policy_dot_namespaces_dot_namespaces__pb2.ListNamespacesResponse.SerializeToString,
            ),
            'CreateNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateNamespace,
                    request_deserializer=policy_dot_namespaces_dot_namespaces__pb2.CreateNamespaceRequest.FromString,
                    response_serializer=policy_dot_namespaces_dot_namespaces__pb2.CreateNamespaceResponse.SerializeToString,
            ),
            'UpdateNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateNamespace,
                    request_deserializer=policy_dot_namespaces_dot_namespaces__pb2.UpdateNamespaceRequest.FromString,
                    response_serializer=policy_dot_namespaces_dot_namespaces__pb2.UpdateNamespaceResponse.SerializeToString,
            ),
            'DeactivateNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.DeactivateNamespace,
                    request_deserializer=policy_dot_namespaces_dot_namespaces__pb2.DeactivateNamespaceRequest.FromString,
                    response_serializer=policy_dot_namespaces_dot_namespaces__pb2.DeactivateNamespaceResponse.SerializeToString,
            ),
            'AssignKeyAccessServerToNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignKeyAccessServerToNamespace,
                    request_deserializer=policy_dot_namespaces_dot_namespaces__pb2.AssignKeyAccessServerToNamespaceRequest.FromString,
                    response_serializer=policy_dot_namespaces_dot_namespaces__pb2.AssignKeyAccessServerToNamespaceResponse.SerializeToString,
            ),
            'RemoveKeyAccessServerFromNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveKeyAccessServerFromNamespace,
                    request_deserializer=policy_dot_namespaces_dot_namespaces__pb2.RemoveKeyAccessServerFromNamespaceRequest.FromString,
                    response_serializer=policy_dot_namespaces_dot_namespaces__pb2.RemoveKeyAccessServerFromNamespaceResponse.SerializeToString,
            ),
            'AssignPublicKeyToNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignPublicKeyToNamespace,
                    request_deserializer=policy_dot_namespaces_dot_namespaces__pb2.AssignPublicKeyToNamespaceRequest.FromString,
                    response_serializer=policy_dot_namespaces_dot_namespaces__pb2.AssignPublicKeyToNamespaceResponse.SerializeToString,
            ),
            'RemovePublicKeyFromNamespace': grpc.unary_unary_rpc_method_handler(
                    servicer.RemovePublicKeyFromNamespace,
                    request_deserializer=policy_dot_namespaces_dot_namespaces__pb2.RemovePublicKeyFromNamespaceRequest.FromString,
                    response_serializer=policy_dot_namespaces_dot_namespaces__pb2.RemovePublicKeyFromNamespaceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'policy.namespaces.NamespaceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('policy.namespaces.NamespaceService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NamespaceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.namespaces.NamespaceService/GetNamespace',
            policy_dot_namespaces_dot_namespaces__pb2.GetNamespaceRequest.SerializeToString,
            policy_dot_namespaces_dot_namespaces__pb2.GetNamespaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListNamespaces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.namespaces.NamespaceService/ListNamespaces',
            policy_dot_namespaces_dot_namespaces__pb2.ListNamespacesRequest.SerializeToString,
            policy_dot_namespaces_dot_namespaces__pb2.ListNamespacesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.namespaces.NamespaceService/CreateNamespace',
            policy_dot_namespaces_dot_namespaces__pb2.CreateNamespaceRequest.SerializeToString,
            policy_dot_namespaces_dot_namespaces__pb2.CreateNamespaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.namespaces.NamespaceService/UpdateNamespace',
            policy_dot_namespaces_dot_namespaces__pb2.UpdateNamespaceRequest.SerializeToString,
            policy_dot_namespaces_dot_namespaces__pb2.UpdateNamespaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeactivateNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.namespaces.NamespaceService/DeactivateNamespace',
            policy_dot_namespaces_dot_namespaces__pb2.DeactivateNamespaceRequest.SerializeToString,
            policy_dot_namespaces_dot_namespaces__pb2.DeactivateNamespaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AssignKeyAccessServerToNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.namespaces.NamespaceService/AssignKeyAccessServerToNamespace',
            policy_dot_namespaces_dot_namespaces__pb2.AssignKeyAccessServerToNamespaceRequest.SerializeToString,
            policy_dot_namespaces_dot_namespaces__pb2.AssignKeyAccessServerToNamespaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveKeyAccessServerFromNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.namespaces.NamespaceService/RemoveKeyAccessServerFromNamespace',
            policy_dot_namespaces_dot_namespaces__pb2.RemoveKeyAccessServerFromNamespaceRequest.SerializeToString,
            policy_dot_namespaces_dot_namespaces__pb2.RemoveKeyAccessServerFromNamespaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AssignPublicKeyToNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.namespaces.NamespaceService/AssignPublicKeyToNamespace',
            policy_dot_namespaces_dot_namespaces__pb2.AssignPublicKeyToNamespaceRequest.SerializeToString,
            policy_dot_namespaces_dot_namespaces__pb2.AssignPublicKeyToNamespaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemovePublicKeyFromNamespace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/policy.namespaces.NamespaceService/RemovePublicKeyFromNamespace',
            policy_dot_namespaces_dot_namespaces__pb2.RemovePublicKeyFromNamespaceRequest.SerializeToString,
            policy_dot_namespaces_dot_namespaces__pb2.RemovePublicKeyFromNamespaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
