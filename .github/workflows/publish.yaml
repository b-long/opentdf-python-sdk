name: PyPIBuild

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_macos:
    name: MacOS ${{ matrix.os_version }} Python 3${{ matrix.python3_version }} ${{ matrix.arch_cibw_go[0] }}
    strategy:
      fail-fast: false
      matrix:
        os_version: [ 13 ]
        python3_version: [ 12 ]  # Focus on Python 3.12+ as required by pyproject.toml
        arch_cibw_go:
          - [ "x86_64", "amd64" ]
          - [ "arm64", "arm64" ]
    runs-on: macos-${{ matrix.os_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_ARCHS: ${{ matrix.arch_cibw_go[0] }}
          CIBW_BUILD: "cp3${{ matrix.python3_version }}-*"
          CIBW_SKIP: "cp36-* cp37-* cp38-* cp39-* cp310-* cp311-* cp313-* *-musllinux_x86_64"
          CIBW_TEST_COMMAND: "uv run python -c 'import otdf_python; print(\"Package imported successfully\")'"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos${{ matrix.os_version }}-py3${{ matrix.python3_version }}-${{ matrix.arch_cibw_go[0] }}
          path: ./wheelhouse/*.whl

  build_linux_x86_64:
    name: Linux Python x86_64
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_BUILD: "cp312-*"  # Focus on Python 3.12+ as required
          CIBW_SKIP: "cp36-* cp37-* cp38-* cp39-* cp310-* cp311-* cp313-* *-musllinux_x86_64"
          CIBW_ARCHS: "x86_64"
          CIBW_TEST_COMMAND: "uv run python -c 'import otdf_python; print(\"Package imported successfully\")'"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-x86_64
          path: ./wheelhouse/*.whl

  build_linux_arm:
    name: Linux Python ARM
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      # QEMU is used by cibuildwheel to cross-compile wheels
      # https://cibuildwheel.pypa.io/en/stable/faq/#emulation
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_BUILD: "cp312-*"  # Focus on Python 3.12+ as required
          CIBW_SKIP: "cp36-* cp37-* cp38-* cp39-* cp310-* cp311-* cp313-* *-musllinux_x86_64"
          CIBW_ARCHS: "aarch64"
          CIBW_TEST_COMMAND: "uv run python -c 'import otdf_python; print(\"Package imported successfully\")'"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-arm
          path: ./wheelhouse/*.whl

#   build_windows:
#     if: false  # not working
#     name: Windows 310,311 x86_64
#     runs-on: windows-2019

#     steps:
#       - uses: actions/checkout@v4

#       - name: Setup project files
#         run: |
#            rm -rf poetry.lock pyproject.toml
#            cp setup_ci.py setup.py

#       - name: set up Go
#         uses: actions/setup-go@v3
#         with:
#           go-version: "1.24.x"

#       - name: install gopy
#         run: go install github.com/go-python/gopy@v0.4.10

#       - name: install goimports
#         run: go install golang.org/x/tools/cmd/goimports@latest

#       - name: Build wheels
#         uses: pypa/cibuildwheel@v2.21.3
#         env:
#           # CGO_ENABLED: 1
#           CIBW_BUILD: "cp3*"
#           CIBW_SKIP: "cp36-* cp37-* cp38-* cp39-* cp313-* *-musllinux_x86_64"
#           CIBW_ARCHS: "native"
#           CIBW_ENVIRONMENT: >
#             GOARCH=amd64

#       - name: Upload artifacts
#         uses: actions/upload-artifact@v4
#         with:
#           name: wheels-windows-amd64
#           path: ./wheelhouse/*.whl


  release:
    permissions:
      contents: write
      # This permission is mandatory for PyPI's trusted publishing
      id-token: write
    needs: [build_macos, build_linux_x86_64, build_linux_arm]
    runs-on: ubuntu-22.04
    # If branch is 'main'
    if: github.ref == 'refs/heads/main'

    steps:
        - uses: actions/checkout@v4
        - uses: actions/download-artifact@v4

        - name: Install uv
          uses: astral-sh/setup-uv@v6
          with:
            version: "latest"

        - name: Collect all wheels
          run: |
            # ls -R
            mkdir dist
            for f in $(find . -type f -name '*.whl'); do mv ${f} dist; done;
            ls -R dist

        - name: Store version
          run: |
              uv add --dev hatchling
              PROJECT_VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
              echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV

        # Publish with "trusted publisher" mechanism:
        # https://docs.pypi.org/trusted-publishers/
        #
        # Requires GHA token permission (above in YAML) and PyPI management:
        #   https://pypi.org/manage/project/otdf-python/settings/publishing/
        - name: Publish package distributions to PyPI
          uses: pypa/gh-action-pypi-publish@release/v1
          with:
            # repository-url: https://pypi.org/legacy/
            packages-dir: dist/

        - uses: ncipollo/release-action@v1
          with:
            artifacts: |
                README.md,
                dist/*.whl
            body: otdf_python version ${{ env.PROJECT_VERSION }}
            # tag: "dev-${{ github.job }}-${{ env.PROJECT_VERSION }}"
            tag: v${{ env.PROJECT_VERSION }}
