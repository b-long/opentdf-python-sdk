name: Release Please

on:
  push:
    branches:
      - main
      - develop
      - chore/update-docs-and-release-process
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  # Run full test suite before any release operations
  test-suite:
    uses: ./.github/workflows/test-suite.yaml

  release-please:
    runs-on: ubuntu-latest
    needs: test-suite
    if: needs.test-suite.outputs.tests_passed == 'true'
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      paths_released: ${{ steps.release.outputs.paths_released }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json
          target-branch: develop # FIXME: Change to 'main' after initial setup
          token: ${{ secrets.GITHUB_TOKEN }}

  # Trigger appropriate publish workflows based on release type
  trigger-publish:
    permissions:
      contents: write
      # This permission is mandatory for PyPI's trusted publishing
      id-token: write
    needs: release-please
    if: ${{ needs.release-please.outputs.releases_created }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check if alpha release
        id: check_alpha
        run: |
          # Get the version from the main package
          VERSION=$(cat .release-please-manifest.json | jq -r '."."')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          if [[ "$VERSION" =~ [0-9]+\.[0-9]+\.[0-9]+a[0-9]+ ]]; then
            echo "is_alpha=true" >> $GITHUB_OUTPUT
            echo "Alpha version detected: $VERSION"
          else
            echo "is_alpha=false" >> $GITHUB_OUTPUT
            echo "Stable version detected: $VERSION"
          fi


      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Build package
        shell: bash
        run: |
          uv build

      - name: Test import
        shell: bash
        run: |
          uv run python -c 'import otdf_python; print("Package imported successfully")'

      - name: Store version
        shell: bash
        run: |
          PROJECT_VERSION=$(uv version --short)
          echo "PROJECT_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV

      # For develop branch: trigger TestPyPI build (both alpha and stable releases go to TestPyPI from develop)

      # Publish with "trusted publisher" mechanism:
      # https://docs.pypi.org/trusted-publishers/
      #
      # Requires GHA token permission (above in YAML) and PyPI management:
      #   https://test.pypi.org/manage/project/otdf-python/settings/publishing/
      - name: Publish package distributions to TestPyPI
        if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/chore/update-docs-and-release-process'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true
          packages-dir: dist/

      - name: Create release
        if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/chore/update-docs-and-release-process'
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
              dist/*.whl,
              dist/*.tar.gz
          body: otdf_python version ${{ env.PROJECT_VERSION }}
          makeLatest: "false"
          tag: "${{ env.PROJECT_VERSION }}-dev-${{ github.sha }}"
          # tag: v${{ env.PROJECT_VERSION }}

      # For main branch: trigger PyPI build (both alpha and stable releases go to PyPI from main)
      # Publish with "trusted publisher" mechanism:
      # https://docs.pypi.org/trusted-publishers/
      #
      # Requires GHA token permission (above in YAML) and PyPI management:
      #   https://pypi.org/manage/project/otdf-python/settings/publishing/
      - name: Publish package distributions to PyPI
        if: github.ref == 'refs/heads/main'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # repository-url: https://pypi.org/legacy/
          packages-dir: dist/
          verbose: true

      - name: Create release
        if: github.ref == 'refs/heads/main'
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
              dist/*.whl,
              dist/*.tar.gz
          body: otdf_python version ${{ env.PROJECT_VERSION }}
          tag: v${{ env.PROJECT_VERSION }}
